{"version":3,"sources":["Message.module.css","CharacterItem.module.css","NumberCounter.module.css","Name.module.css","Button.module.css","Name.jsx","Message.jsx","CharacterItem.jsx","Characters.jsx","Button.jsx","NumberCounter.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Name","className","styles","name","Message","message","avatar","src","alt","cloud","userName","time","CharacterItem","isNotOrdinary","this","props","isRomantic","characterItem","notOrdinary","character","React","Component","Characters","characters","map","c","key","toString","NumberCounter","userNameCurrentRef","createRef","state","number","onGreetUserName","newName","current","value","alert","setState","numberCounter","type","placeholder","ref","onClick","App","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,MAAQ,uBAAuB,SAAW,0BAA0B,KAAO,wB,gBCAjKD,EAAOC,QAAU,CAAC,cAAgB,qCAAqC,YAAc,qC,gBCArFD,EAAOC,QAAU,CAAC,cAAgB,uC,oCCAlCD,EAAOC,QAAU,CAAC,KAAO,qB,kCCAzBD,EAAOC,QAAU,CAAC,OAAS,yB,qLCUZC,EARF,WACX,OACE,yBAAKC,UAAWC,IAAOC,MACrB,6G,gBCYSC,EAfC,WACZ,OACI,yBAAKH,UAAWC,IAAOG,SACnB,yBAAKJ,UAAWC,IAAOI,QACnB,yBAAKC,IAAI,qEAAqEC,IAAI,YAEtF,yBAAKP,UAAWC,IAAOO,OACnB,0BAAMR,UAAWC,IAAOQ,UAAxB,QACA,+KACA,0BAAMT,UAAWC,IAAOS,MAAxB,Y,wCCIDC,E,uKAVP,IAAIC,EAAgBC,KAAKC,MAAMC,WAAcd,IAAOe,cAAgB,IAAMf,IAAOgB,YAAehB,IAAOe,cACvG,OACI,yBAAKhB,UAAWY,GACZ,8BACKC,KAAKC,MAAMI,gB,GANJC,IAAMC,WCUnBC,E,uKAPP,OACI,yBAAKrB,UAAWC,IAAOqB,YAFV,CAAC,eAAgB,WAAY,UAG1BC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAeC,IAAKD,EAAEE,WAAYR,UAAWM,EAAGT,WAAkB,aAANS,Y,GALpEL,IAAMC,W,oBCDdD,IAAMC,U,eCqBZO,E,4MApBXC,mBAAqBT,IAAMU,Y,EAC3BC,MAAQ,CAACC,OAAQ,G,EAEjBC,gBAAkB,WACd,IAAIC,EAAU,EAAKL,mBAAmBM,QAAQC,MAC9C,EAAKP,mBAAmBM,QAAQC,MAAQ,GACxCC,MAAM,yCAAkBH,EAAU,KAClC,EAAKI,SAAS,CAACN,OAAQ,EAAKD,MAAMC,OAAS,K,uDAI3C,OACI,yBAAK/B,UAAWC,IAAOqC,eACnB,8BAAOzB,KAAKiB,MAAMC,QAClB,2BAAOQ,KAAK,OAAOC,YAAa,oFAAoBC,IAAK5B,KAAKe,qBAC9D,4BAAQc,QAAS7B,KAAKmB,iBAAtB,4B,GAhBYb,IAAMC,WCgCnBuB,E,4MAvBXC,OAAS,WACL,OACI,yBAAK5C,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,YATFmB,IAAMC,WCEJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMzD,c","file":"static/js/main.0e4d5386.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__2qkL6\",\"avatar\":\"Message_avatar__1cAeA\",\"cloud\":\"Message_cloud__1CH-3\",\"userName\":\"Message_userName__2NtoT\",\"time\":\"Message_time__2SNcb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"characterItem\":\"CharacterItem_characterItem__2XqC_\",\"notOrdinary\":\"CharacterItem_notOrdinary__ahnQV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"numberCounter\":\"NumberCounter_numberCounter__39nqQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"Name_name__3rUv5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__7ZTGF\"};","import React from 'react';\nimport styles from './Name.module.css';\n\nconst Name = () => {\n  return (\n    <div className={styles.name}>\n      <span>Лена Веселова</span>\n    </div>\n  );\n}\n\nexport default Name;\n","import React from 'react';\nimport styles from './Message.module.css';\n\nconst Message = () => {\n    return (\n        <div className={styles.message}>\n            <div className={styles.avatar}>\n                <img src=\"https://sun9-67.userapi.com/c10749/u98679/134928874/z_fb3c2aa2.jpg\" alt=\"avatar\"/>\n            </div>\n            <div className={styles.cloud}>\n                <span className={styles.userName}>Lena</span>\n                <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.                  </span>\n                <span className={styles.time}>10:23</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Message;\n","import React from 'react';\nimport styles from './CharacterItem.module.css';\nimport Characters from \"./Characters\";\n\nclass CharacterItem extends React.Component {\n    render () {\n        let isNotOrdinary = this.props.isRomantic ? (styles.characterItem + ' ' + styles.notOrdinary) : styles.characterItem;\n        return (\n            <div className={isNotOrdinary}>\n                <span>\n                    {this.props.character}\n                </span>\n            </div>\n        );\n    }\n}\nexport default CharacterItem;\n","import React from 'react';\nimport styles from './Characters.module.css';\nimport CharacterItem from \"./CharacterItem\";\n\n    class Characters extends React.Component {\n    render() {\n        let characters = ['January girl', 'Romantic', 'Moving'];\n        return (\n            <div className={styles.characters}>\n                {characters.map(c => <CharacterItem key={c.toString()} character={c} isRomantic={c === 'Romantic' ? true : false}/>)}\n            </div>\n        );\n    }\n}\nexport default Characters;","import React from 'react';\nimport styles from './Button.module.css'\n\nclass Button extends React.Component {\n    render () {\n        return (\n            <div className={styles.button + \" \" + this.props.className}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Button;\n","import React from 'react';\nimport styles from \"./NumberCounter.module.css\";\n\nclass NumberCounter extends React.Component {\n    userNameCurrentRef = React.createRef();\n    state = {number: 0};\n\n    onGreetUserName = () => {\n        let newName = this.userNameCurrentRef.current.value;\n        this.userNameCurrentRef.current.value = '';\n        alert('Привет,' + ' ' + newName + '!');\n        this.setState({number: this.state.number + 1});\n    };\n\n    render () {\n        return (\n            <div className={styles.numberCounter}>\n                <span>{this.state.number}</span>\n                <input type=\"text\" placeholder={'Напиши свое имя!'} ref={this.userNameCurrentRef}/>\n                <button onClick={this.onGreetUserName}>Жми!</button>\n            </div>\n        );\n    }\n}\nexport default NumberCounter;\n","import React from 'react';\nimport './App.css';\nimport Name from \"./Name\";\nimport Message from \"./Message\";\nimport Characters from \"./Characters\";\nimport Button from \"./Button\";\nimport './App.css'\nimport NumberCounter from \"./NumberCounter\";\nimport styles from \"./NumberCounter.module.css\";\n\nclass App extends React.Component {\n\n    render = () => {\n        return (\n            <div className='App'>\n                <div className=\"container\">\n                    <Name/>\n                    <Characters/>\n                    <Message/>\n                    <NumberCounter/>\n                    {/*<div className='buttons'>*/}\n                    {/*    <Button className='default' type=\"default\">Default</Button>*/}\n                    {/*    <Button className='primary' type=\"primary\">Primary</Button>*/}\n                    {/*    <Button className='danger' type=\"danger\">Danger</Button>*/}\n                    {/*    <Button className='default' type=\"default\" loading={true}>*/}\n                    {/*        <img className='loading' src=\"https://i.gifer.com/H0bj.gif\" />*/}\n                    {/*        <span>Loading</span>*/}\n                    {/*    </Button>*/}\n                    {/*</div>*/}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}